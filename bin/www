#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project21-school:server');
var http = require('http');
var mongoose = require('mongoose');
var session = require('express-session');
var MongoStore = require('connect-mongo');
var method = require('method-override');
var flash = require('connect-flash');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Database
 */
const dbURI = 'mongodb://127.0.0.1:27017/project21_school';
var SECRET = 'mongodb://127.0.0.1:27017/project21_school';

mongoose.connect(dbURI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => {
        /**
          * Listen on provided port, on all network interfaces.
          */

      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening)
})
.catch((err) => {
    console.log(err)
})

const db = mongoose.connection;
db.on('connected', () => {
    console.log(`Database ${db.name} connected at ${db.host}`);
});

app.use(session({
  secret: SECRET,
  name: 'session-api',
  saveUninitialized: false, 
  resave: false,
  store: new MongoStore({
      mongoUrl: dbURI,
      collectionName: 'sessions',
  }),
  cookie: {
      maxAge: 24 * 60 * 60 * 1000,
      secure: true,
      httpOnly: true,
  }
}));
app.use(flash());

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
